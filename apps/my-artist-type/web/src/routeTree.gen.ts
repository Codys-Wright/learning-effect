/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SidebarTestRouteImport } from './routes/sidebar-test'
import { Route as ResponsesRouteImport } from './routes/responses'
import { Route as RadarTestRouteImport } from './routes/radar-test'
import { Route as QuizTakerRouteImport } from './routes/quiz-taker'
import { Route as QuizEditorRouteImport } from './routes/quiz-editor'
import { Route as QuizRouteImport } from './routes/quiz'
import { Route as PlaygroundRouteImport } from './routes/playground'
import { Route as ExampleRouteImport } from './routes/example'
import { Route as EnginesRouteImport } from './routes/engines'
import { Route as ArtistTypesRouteImport } from './routes/artist-types'
import { Route as AnalysisRouteImport } from './routes/analysis'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminResponsesRouteImport } from './routes/admin/responses'
import { Route as AdminQuizEditorRouteImport } from './routes/admin/quiz-editor'
import { Route as AdminResponsesResponseIdRouteImport } from './routes/admin/responses/$responseId'
import { Route as AdminResponsesResponseIdAnalysisRouteImport } from './routes/admin/responses/$responseId/analysis'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api/$'

const rootServerRouteImport = createServerRootRoute()

const SidebarTestRoute = SidebarTestRouteImport.update({
  id: '/sidebar-test',
  path: '/sidebar-test',
  getParentRoute: () => rootRouteImport,
} as any)
const ResponsesRoute = ResponsesRouteImport.update({
  id: '/responses',
  path: '/responses',
  getParentRoute: () => rootRouteImport,
} as any)
const RadarTestRoute = RadarTestRouteImport.update({
  id: '/radar-test',
  path: '/radar-test',
  getParentRoute: () => rootRouteImport,
} as any)
const QuizTakerRoute = QuizTakerRouteImport.update({
  id: '/quiz-taker',
  path: '/quiz-taker',
  getParentRoute: () => rootRouteImport,
} as any)
const QuizEditorRoute = QuizEditorRouteImport.update({
  id: '/quiz-editor',
  path: '/quiz-editor',
  getParentRoute: () => rootRouteImport,
} as any)
const QuizRoute = QuizRouteImport.update({
  id: '/quiz',
  path: '/quiz',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaygroundRoute = PlaygroundRouteImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRouteImport,
} as any)
const ExampleRoute = ExampleRouteImport.update({
  id: '/example',
  path: '/example',
  getParentRoute: () => rootRouteImport,
} as any)
const EnginesRoute = EnginesRouteImport.update({
  id: '/engines',
  path: '/engines',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistTypesRoute = ArtistTypesRouteImport.update({
  id: '/artist-types',
  path: '/artist-types',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalysisRoute = AnalysisRouteImport.update({
  id: '/analysis',
  path: '/analysis',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminResponsesRoute = AdminResponsesRouteImport.update({
  id: '/responses',
  path: '/responses',
  getParentRoute: () => AdminRoute,
} as any)
const AdminQuizEditorRoute = AdminQuizEditorRouteImport.update({
  id: '/quiz-editor',
  path: '/quiz-editor',
  getParentRoute: () => AdminRoute,
} as any)
const AdminResponsesResponseIdRoute =
  AdminResponsesResponseIdRouteImport.update({
    id: '/$responseId',
    path: '/$responseId',
    getParentRoute: () => AdminResponsesRoute,
  } as any)
const AdminResponsesResponseIdAnalysisRoute =
  AdminResponsesResponseIdAnalysisRouteImport.update({
    id: '/analysis',
    path: '/analysis',
    getParentRoute: () => AdminResponsesResponseIdRoute,
  } as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/analysis': typeof AnalysisRoute
  '/artist-types': typeof ArtistTypesRoute
  '/engines': typeof EnginesRoute
  '/example': typeof ExampleRoute
  '/playground': typeof PlaygroundRoute
  '/quiz': typeof QuizRoute
  '/quiz-editor': typeof QuizEditorRoute
  '/quiz-taker': typeof QuizTakerRoute
  '/radar-test': typeof RadarTestRoute
  '/responses': typeof ResponsesRoute
  '/sidebar-test': typeof SidebarTestRoute
  '/admin/quiz-editor': typeof AdminQuizEditorRoute
  '/admin/responses': typeof AdminResponsesRouteWithChildren
  '/admin/responses/$responseId': typeof AdminResponsesResponseIdRouteWithChildren
  '/admin/responses/$responseId/analysis': typeof AdminResponsesResponseIdAnalysisRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/analysis': typeof AnalysisRoute
  '/artist-types': typeof ArtistTypesRoute
  '/engines': typeof EnginesRoute
  '/example': typeof ExampleRoute
  '/playground': typeof PlaygroundRoute
  '/quiz': typeof QuizRoute
  '/quiz-editor': typeof QuizEditorRoute
  '/quiz-taker': typeof QuizTakerRoute
  '/radar-test': typeof RadarTestRoute
  '/responses': typeof ResponsesRoute
  '/sidebar-test': typeof SidebarTestRoute
  '/admin/quiz-editor': typeof AdminQuizEditorRoute
  '/admin/responses': typeof AdminResponsesRouteWithChildren
  '/admin/responses/$responseId': typeof AdminResponsesResponseIdRouteWithChildren
  '/admin/responses/$responseId/analysis': typeof AdminResponsesResponseIdAnalysisRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/analysis': typeof AnalysisRoute
  '/artist-types': typeof ArtistTypesRoute
  '/engines': typeof EnginesRoute
  '/example': typeof ExampleRoute
  '/playground': typeof PlaygroundRoute
  '/quiz': typeof QuizRoute
  '/quiz-editor': typeof QuizEditorRoute
  '/quiz-taker': typeof QuizTakerRoute
  '/radar-test': typeof RadarTestRoute
  '/responses': typeof ResponsesRoute
  '/sidebar-test': typeof SidebarTestRoute
  '/admin/quiz-editor': typeof AdminQuizEditorRoute
  '/admin/responses': typeof AdminResponsesRouteWithChildren
  '/admin/responses/$responseId': typeof AdminResponsesResponseIdRouteWithChildren
  '/admin/responses/$responseId/analysis': typeof AdminResponsesResponseIdAnalysisRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/analysis'
    | '/artist-types'
    | '/engines'
    | '/example'
    | '/playground'
    | '/quiz'
    | '/quiz-editor'
    | '/quiz-taker'
    | '/radar-test'
    | '/responses'
    | '/sidebar-test'
    | '/admin/quiz-editor'
    | '/admin/responses'
    | '/admin/responses/$responseId'
    | '/admin/responses/$responseId/analysis'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/analysis'
    | '/artist-types'
    | '/engines'
    | '/example'
    | '/playground'
    | '/quiz'
    | '/quiz-editor'
    | '/quiz-taker'
    | '/radar-test'
    | '/responses'
    | '/sidebar-test'
    | '/admin/quiz-editor'
    | '/admin/responses'
    | '/admin/responses/$responseId'
    | '/admin/responses/$responseId/analysis'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/analysis'
    | '/artist-types'
    | '/engines'
    | '/example'
    | '/playground'
    | '/quiz'
    | '/quiz-editor'
    | '/quiz-taker'
    | '/radar-test'
    | '/responses'
    | '/sidebar-test'
    | '/admin/quiz-editor'
    | '/admin/responses'
    | '/admin/responses/$responseId'
    | '/admin/responses/$responseId/analysis'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AnalysisRoute: typeof AnalysisRoute
  ArtistTypesRoute: typeof ArtistTypesRoute
  EnginesRoute: typeof EnginesRoute
  ExampleRoute: typeof ExampleRoute
  PlaygroundRoute: typeof PlaygroundRoute
  QuizRoute: typeof QuizRoute
  QuizEditorRoute: typeof QuizEditorRoute
  QuizTakerRoute: typeof QuizTakerRoute
  RadarTestRoute: typeof RadarTestRoute
  ResponsesRoute: typeof ResponsesRoute
  SidebarTestRoute: typeof SidebarTestRoute
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$'
  id: '__root__' | '/api/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sidebar-test': {
      id: '/sidebar-test'
      path: '/sidebar-test'
      fullPath: '/sidebar-test'
      preLoaderRoute: typeof SidebarTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/responses': {
      id: '/responses'
      path: '/responses'
      fullPath: '/responses'
      preLoaderRoute: typeof ResponsesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/radar-test': {
      id: '/radar-test'
      path: '/radar-test'
      fullPath: '/radar-test'
      preLoaderRoute: typeof RadarTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quiz-taker': {
      id: '/quiz-taker'
      path: '/quiz-taker'
      fullPath: '/quiz-taker'
      preLoaderRoute: typeof QuizTakerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quiz-editor': {
      id: '/quiz-editor'
      path: '/quiz-editor'
      fullPath: '/quiz-editor'
      preLoaderRoute: typeof QuizEditorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quiz': {
      id: '/quiz'
      path: '/quiz'
      fullPath: '/quiz'
      preLoaderRoute: typeof QuizRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example': {
      id: '/example'
      path: '/example'
      fullPath: '/example'
      preLoaderRoute: typeof ExampleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/engines': {
      id: '/engines'
      path: '/engines'
      fullPath: '/engines'
      preLoaderRoute: typeof EnginesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artist-types': {
      id: '/artist-types'
      path: '/artist-types'
      fullPath: '/artist-types'
      preLoaderRoute: typeof ArtistTypesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analysis': {
      id: '/analysis'
      path: '/analysis'
      fullPath: '/analysis'
      preLoaderRoute: typeof AnalysisRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/responses': {
      id: '/admin/responses'
      path: '/responses'
      fullPath: '/admin/responses'
      preLoaderRoute: typeof AdminResponsesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/quiz-editor': {
      id: '/admin/quiz-editor'
      path: '/quiz-editor'
      fullPath: '/admin/quiz-editor'
      preLoaderRoute: typeof AdminQuizEditorRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/responses/$responseId': {
      id: '/admin/responses/$responseId'
      path: '/$responseId'
      fullPath: '/admin/responses/$responseId'
      preLoaderRoute: typeof AdminResponsesResponseIdRouteImport
      parentRoute: typeof AdminResponsesRoute
    }
    '/admin/responses/$responseId/analysis': {
      id: '/admin/responses/$responseId/analysis'
      path: '/analysis'
      fullPath: '/admin/responses/$responseId/analysis'
      preLoaderRoute: typeof AdminResponsesResponseIdAnalysisRouteImport
      parentRoute: typeof AdminResponsesResponseIdRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AdminResponsesResponseIdRouteChildren {
  AdminResponsesResponseIdAnalysisRoute: typeof AdminResponsesResponseIdAnalysisRoute
}

const AdminResponsesResponseIdRouteChildren: AdminResponsesResponseIdRouteChildren =
  {
    AdminResponsesResponseIdAnalysisRoute:
      AdminResponsesResponseIdAnalysisRoute,
  }

const AdminResponsesResponseIdRouteWithChildren =
  AdminResponsesResponseIdRoute._addFileChildren(
    AdminResponsesResponseIdRouteChildren,
  )

interface AdminResponsesRouteChildren {
  AdminResponsesResponseIdRoute: typeof AdminResponsesResponseIdRouteWithChildren
}

const AdminResponsesRouteChildren: AdminResponsesRouteChildren = {
  AdminResponsesResponseIdRoute: AdminResponsesResponseIdRouteWithChildren,
}

const AdminResponsesRouteWithChildren = AdminResponsesRoute._addFileChildren(
  AdminResponsesRouteChildren,
)

interface AdminRouteChildren {
  AdminQuizEditorRoute: typeof AdminQuizEditorRoute
  AdminResponsesRoute: typeof AdminResponsesRouteWithChildren
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminQuizEditorRoute: AdminQuizEditorRoute,
  AdminResponsesRoute: AdminResponsesRouteWithChildren,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AnalysisRoute: AnalysisRoute,
  ArtistTypesRoute: ArtistTypesRoute,
  EnginesRoute: EnginesRoute,
  ExampleRoute: ExampleRoute,
  PlaygroundRoute: PlaygroundRoute,
  QuizRoute: QuizRoute,
  QuizEditorRoute: QuizEditorRoute,
  QuizTakerRoute: QuizTakerRoute,
  RadarTestRoute: RadarTestRoute,
  ResponsesRoute: ResponsesRoute,
  SidebarTestRoute: SidebarTestRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
